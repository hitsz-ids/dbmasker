package com.dbmasker.data;

/**
 * Represents the attributes of a column in a database table.
 */
public class TableAttribute {
    private String name;
    private int valueType;
    private long maxLength;
    private boolean required;
    private boolean autoGenerated;
    private int scale;
    private int precision;
    private String typeName;
    private int ordinalPosition;
    private boolean isPrimaryKey;

    /**
     * Constructs a new TableAttribute instance.
     *
     * @param name           the name of the column.
     * @param valueType      the data type of the column as an SQL type.
     * @param maxLength      the maximum length of the column value.
     * @param required       indicates if the column allows NULL values (false) or not (true).
     * @param autoGenerated  indicates if the column is auto-incremented.
     * @param scale          the number of digits to the right of the decimal point for numeric types.
     * @param precision      the number of digits in the radix (typically 10 or 2) for numeric types.
     * @param typeName       the database-specific data type name.
     * @param ordinalPosition the position of the column in the table (starting at 1).
     * @param isPrimaryKey   indicates if the column is primary key.
     */
    public TableAttribute(String name, int valueType, long maxLength, boolean required, boolean autoGenerated,
                          int scale, int precision, String typeName, int ordinalPosition, boolean isPrimaryKey) {
        this.name = name;
        this.valueType = valueType;
        this.maxLength = maxLength;
        this.required = required;
        this.autoGenerated = autoGenerated;
        this.scale = scale;
        this.precision = precision;
        this.typeName = typeName;
        this.ordinalPosition = ordinalPosition;
        this.isPrimaryKey = isPrimaryKey;
    }

    /**
     * Gets the name of the column.
     *
     * @return the name of the column.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the column.
     *
     * @param name the name of the column.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the data type of the column as an SQL type.
     *
     * @return the data type of the column.
     */
    public int getValueType() {
        return valueType;
    }

    /**
     * Sets the data type of the column as an SQL type.
     *
     * @param valueType the data type of the column.
     */
    public void setValueType(int valueType) {
        this.valueType = valueType;
    }

    /**
     * Gets the maximum length of the column value.
     *
     * @return the maximum length of the column value.
     */
    public long getMaxLength() {
        return maxLength;
    }

    /**
     * Sets the maximum length of the column value.
     *
     * @param maxLength the maximum length of the column value.
     */
    public void setMaxLength(long maxLength) {
        this.maxLength = maxLength;
    }

    /**
     * Checks if the column allows NULL values or not.
     *
     * @return true if the column does not allow NULL values, false otherwise.
     */
    public boolean isRequired() {
        return required;
    }

    /**
     * Sets whether the column allows NULL values or not.
     *
     * @param required true if the column should not allow NULL values, false otherwise.
     */
    public void setRequired(boolean required) {
        this.required = required;
    }

    /**
     * Checks if the column is auto-incremented.
     *
     * @return true if the column is auto-incremented, false otherwise.
     */
    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    /**
     * Sets whether the column is auto-incremented.
     *
     * @param autoGenerated true if the column should be auto-incremented, false otherwise.
     */
    public void setAutoGenerated(boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }

    /**
     * Gets the number of digits to the right of the decimal point for numeric types.
     *
     * @return the number of digits to the right of the decimal point.
     */
    public int getScale() {
        return scale;
    }

    /**
     * Sets the number of digits to the right of the decimal point for numeric types.
     *
     * @param scale the number of digits to the right of the decimal point.
     */
    public void setScale(int scale) {
        this.scale = scale;
    }

    /**
     * Gets the number of digits in the radix (typically 10 or 2) for numeric types.
     *
     * @return the number of digits in the radix.
     */
    public int getPrecision() {
        return precision;
    }

    /**
     * Sets the number of digits in the radix (typically 10 or 2) for numeric types.
     *
     * @param precision the number of digits in the radix.
     */
    public void setPrecision(int precision) {
        this.precision = precision;
    }

    /**
     * Gets the database-specific data type name.
     *
     * @return the database-specific data type name.
     */
    public String getTypeName() {
        return typeName;
    }

    /**
     * Sets the database-specific data type name.
     *
     * @param typeName the database-specific data type name.
     */
    public void setTypeName(String typeName) {
        this.typeName = typeName;
    }

    /**
     * Gets the ordinal position of the column within the table.
     *
     * @return the ordinal position of the column.
     */
    public int getOrdinalPosition() {
        return ordinalPosition;
    }

    /**
     * Sets the ordinal position of the column within the table.
     *
     * @param ordinalPosition the ordinal position of the column.
     */
    public void setOrdinalPosition(int ordinalPosition) {
        this.ordinalPosition = ordinalPosition;
    }

    /**
     * Checks if the attribute is a primary key.
     *
     * @return Returns true if the attribute is a primary key, otherwise false.
     */
    public boolean isPrimaryKey() {
        return isPrimaryKey;
    }

    /**
     * Sets whether the attribute is a primary key or not.
     *
     * @param primaryKey Pass true to mark the attribute as a primary key, false otherwise.
     */
    public void setPrimaryKey(boolean primaryKey) {
        isPrimaryKey = primaryKey;
    }

}
